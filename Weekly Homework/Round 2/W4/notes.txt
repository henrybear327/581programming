Sort them and then record the interval's starting and ending point. Expand the ending point
if needed.



Use an array to save every kind of tiles' max height if the number is small enough.



def. of sort



step one
	record start, end
step two
	if new start < old end + 1	(longest one starting from the current interval)
		check for the longest one and change the old end to new end
step three
	repeat step one and step two

Notice : the left/right point might be in reversed order

fgets(buffer, LENGTH, stdin);
sscanf(buffer, "%d", &n);












DP --> when repetition is observed!

3n+1 using DP and bitwise operator

p & 1  means odd

101010111
000000001
---------
000000001 --> odd

<< left shift --> *2
>> right shift --> /2


if(p & 1)
	p = (p << 1) + p + 1;
else
	p = (p >> 1); //p >>= 1;


record some part of the 3n+1's answer(Lazy DP is also welcomed)
because the number will eventually fall in the range starting from 1

3n+1 --> even --> you can look forward


check for 0

p & (1 << i)